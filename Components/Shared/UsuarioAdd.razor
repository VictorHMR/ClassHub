@using ClassHub.ClassHubContext.Models
@using ClassHub.ClassHubContext.Services
@using ClassHub.Dtos.Usuario
@using ClassHub.Enums
@inject UsuarioService UsuarioService

<div class="modal-backdrop fade show"></div>
<div class="modal fade show d-block" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Adicionar Aluno</h5>
                <button type="button" class="btn-close" @onclick="Fechar"></button>
            </div>
            <div class="modal-body">
                <input type="text" @bind="request.Nome" placeholder="Nome" class="form-control mb-2" />
                <input type="text" @bind="request.CPF" placeholder="CPF" class="form-control mb-2" />
                <input type="email" @bind="request.Email" placeholder="Email" class="form-control mb-2" />
                <input type="password" @bind="request.Senha" placeholder="Senha" class="form-control mb-2" />
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="Fechar">Cancelar</button>
                <button class="btn btn-primary" @onclick="AdicionarUsuario">Adicionar</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public TipoUsuario pTipoUsuario { get; set; }
    [Parameter] public EventCallback OnUsuarioAdicionado { get; set; }
    [Parameter] public EventCallback OnFecharModal { get; set; } 

    private CriarUsuarioRequestDTO request = new();

    protected override void OnInitialized()
    {
        request.TipoUsuario = pTipoUsuario;
    }

    private async Task AdicionarUsuario()
    {
        int? idUsuario = await UsuarioService.CriarUsuarioAsync(request);

        if (idUsuario.HasValue)
        {
            await OnUsuarioAdicionado.InvokeAsync();
            request = new CriarUsuarioRequestDTO { TipoUsuario = pTipoUsuario };
            await Fechar();
        }
    }

    private async Task Fechar()
    {
        if (OnFecharModal.HasDelegate)
            await OnFecharModal.InvokeAsync();
    }
}
